name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install

      - name: Generate API client types
        run: pnpm client:gen:ci

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Run tests
        run: pnpm test

      - name: Build
        run: pnpm build:ci
        env:
          VITE_API_BASE_URL: http://localhost:3000

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: aurenworks
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install

      - name: Generate API client types
        run: pnpm client:gen:ci

      - name: Build Studio
        run: pnpm build:ci
        env:
          VITE_API_BASE_URL: http://localhost:3000

      - name: Start mock API
        run: |
          node -e "
            const http = require('http');
            const server = http.createServer((req, res) => {
              res.setHeader('Access-Control-Allow-Origin', '*');
              res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
              res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
              
              if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
              }
              
              const url = new URL(req.url, 'http://localhost');
              const path = url.pathname;
              
              if (path === '/auth/login' && req.method === 'POST') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ token: 'mock-jwt-token' }));
              } else if (path === '/projects' && req.method === 'POST') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ id: 'mock-project-id' }));
              } else if (path.startsWith('/components') && req.method === 'POST') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ id: 'mock-component-id' }));
              } else if (path.startsWith('/components/') && req.method === 'GET') {
                res.writeHead(200, { 
                  'Content-Type': 'application/json',
                  'ETag': 'mock-etag-123'
                });
                res.end(JSON.stringify({ 
                  id: path.split('/')[2],
                  name: 'Test Component',
                  fields: []
                }));
              } else if (path.startsWith('/components/') && req.method === 'PUT') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true }));
              } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Not Found' }));
              }
            });
            server.listen(3000, () => console.log('Mock API running on port 3000'));
          " &
          sleep 3

      - name: Install Playwright
        run: pnpm add -D @playwright/test

      - name: Install Playwright browsers
        run: pnpm dlx playwright install chromium

      - name: Start Studio preview server
        run: |
          pnpm preview --port 5173 --host 0.0.0.0 &
          sleep 5

      - name: Run E2E tests
        run: |
          STUDIO_BASE_URL=http://localhost:5173 \
          API_BASE_URL=http://localhost:3000 \
          pnpm playwright test tests/e2e/ --reporter=list

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 7
